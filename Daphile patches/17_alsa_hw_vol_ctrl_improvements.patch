Combined patch from the following commits at
https://github.com/ralph-irving/squeezelite
7969df4, Aug 27, 2016
97003fd, Sep 8, 2016   	
536cf6b, Oct 3, 2016

diff -ruN squeezelite-1.8.orig/main.c squeezelite-1.8/main.c
--- squeezelite-1.8.orig/main.c	2016-10-07 07:35:41.185089690 +0000
+++ squeezelite-1.8/main.c	2016-10-07 07:36:55.425828946 +0000
@@ -103,9 +103,11 @@
 		   "  -v \t\t\tVisualiser support\n"
 #endif
 # if ALSA
+		   "  -O <mixer device>\tSpecify mixer device, defaults to 'output device'\n"
 		   "  -L \t\t\tList volume controls for output device\n"
 		   "  -U <control>\t\tUnmute ALSA control and set to full volume (not supported with -V)\n"
 		   "  -V <control>\t\tUse ALSA control for volume adjustment, otherwise use software volume adjustment\n"
+		   "  -X \t\t\tUse linear volume adjustments instead of in terms of dB (only for hardware volume control)\n"
 #endif
 #if LINUX || FREEBSD
 		   "  -z \t\t\tDaemonize\n"
@@ -218,8 +220,10 @@
 #endif
 #if ALSA
 	unsigned rt_priority = OUTPUT_RT_PRIORITY;
+	char *mixer_device = output_device;
 	char *output_mixer = NULL;
 	bool output_mixer_unmute = false;
+	bool linear_volume = false;
 #endif
 #if DSD
 	unsigned dsd_delay = 0;
@@ -258,14 +262,14 @@
 		char *opt = argv[optind] + 1;
 		if (strstr("oabcCdefmMnNpPrs"
 #if ALSA
-				   "UV"
+				   "UVO"
 #endif
 				   , opt) && optind < argc - 1) {
 			optarg = argv[optind + 1];
 			optind += 2;
 		} else if (strstr("ltz?"
 #if ALSA
-						  "L"
+						  "LX"
 #endif
 #if RESAMPLE
 						  "uxR"
@@ -292,6 +296,9 @@
 		switch (opt[0]) {
 		case 'o':
 			output_device = optarg;
+#if ALSA
+			mixer_device = optarg;
+#endif
 			break;
 		case 'a':
 			output_params = optarg;
@@ -432,12 +439,6 @@
 			list_devices();
 			exit(0);
 			break;
-#if ALSA
-		case 'L':
-			list_mixers(output_device);
-			exit(0);
-			break;
-#endif
 #if RESAMPLE
 		case 'x':
 			lms_downsample = false;
@@ -477,6 +478,16 @@
 			break;
 #endif
 #if ALSA
+		case 'O':
+			mixer_device = optarg;
+			break;
+		case 'L':
+			list_mixers(mixer_device);
+			exit(0);
+			break;
+		case 'X':
+			linear_volume = true;
+			break;
 		case 'U':
 			output_mixer_unmute = true;
 		case 'V':
@@ -584,8 +595,8 @@
 		output_init_stdout(log_output, output_buf_size, output_params, rates, rate_delay);
 	} else {
 #if ALSA
-		output_init_alsa(log_output, output_device, output_buf_size, output_params, rates, rate_delay, rt_priority, idle, output_mixer,
-						 output_mixer_unmute);
+		output_init_alsa(log_output, output_device, output_buf_size, output_params, rates, rate_delay, rt_priority, idle, mixer_device, output_mixer,
+						 output_mixer_unmute, linear_volume);
 #endif
 #if PORTAUDIO
 		output_init_pa(log_output, output_device, output_buf_size, output_params, rates, rate_delay, idle);
diff -ruN squeezelite-1.8.orig/output_alsa.c squeezelite-1.8/output_alsa.c
--- squeezelite-1.8.orig/output_alsa.c	2016-10-07 07:35:41.611741444 +0000
+++ squeezelite-1.8/output_alsa.c	2016-10-07 07:36:51.232642086 +0000
@@ -44,6 +44,7 @@
 static struct {
 	char device[MAX_DEVICE_LEN + 1];
 	char *ctl;
+	char *mixer_ctl;
 	snd_pcm_format_t format;
 #if DSD
 	dsd_format outfmt;
@@ -57,7 +58,11 @@
 	bool reopen;
 	u8_t *write_buf;
 	const char *volume_mixer_name;
-	int volume_mixer_index;
+	bool mixer_linear;
+	snd_mixer_elem_t* mixer_elem;
+	snd_mixer_t *mixer_handle;
+	long mixer_min;
+	long mixer_max;
 } alsa;
 
 static snd_pcm_t *pcmp = NULL;
@@ -170,100 +175,52 @@
 
 #define MINVOL_DB 72 // LMS volume map for SqueezePlay sends values in range ~ -72..0 dB
 
-static void set_mixer(const char *device, const char *mixer, int mixer_index, bool setmax, float ldB, float rdB) {
+static void set_mixer(bool setmax, float ldB, float rdB) {
 	int err;
 	long nleft, nright;
-	long min, max;
-	snd_mixer_t *handle;
-	snd_mixer_selem_id_t *sid;
-	snd_mixer_elem_t* elem;
-
-	if ((err = snd_mixer_open(&handle, 0)) < 0) {
-		LOG_ERROR("open error: %s", snd_strerror(err));
-		return;
-	}
-	if ((err = snd_mixer_attach(handle, device)) < 0) {
-		LOG_ERROR("attach error: %s", snd_strerror(err));
-		snd_mixer_close(handle);
-		return;
-	}
-	if ((err = snd_mixer_selem_register(handle, NULL, NULL)) < 0) {
-		LOG_ERROR("register error: %s", snd_strerror(err));
-		snd_mixer_close(handle);
-		return;
-	}
-	if ((err = snd_mixer_load(handle)) < 0) {
-		LOG_ERROR("load error: %s", snd_strerror(err));
-		snd_mixer_close(handle);
-		return;
-	}
-
-	snd_mixer_selem_id_alloca(&sid);
-
-	snd_mixer_selem_id_set_index(sid, mixer_index);
-	snd_mixer_selem_id_set_name(sid, mixer);
-
-	if ((elem = snd_mixer_find_selem(handle, sid)) == NULL) {
-		LOG_ERROR("error find selem %s", mixer);
-		snd_mixer_close(handle);
-		return;
-	}
-
-	if (snd_mixer_selem_has_playback_switch(elem)) {
-		snd_mixer_selem_set_playback_switch_all(elem, 1); // unmute
-	}
-
-	err = snd_mixer_selem_get_playback_dB_range(elem, &min, &max);
-
-	if (err < 0 || max - min < 1000) {
-		// unable to get db range or range is less than 10dB - ignore and set using raw values
-		if ((err = snd_mixer_selem_get_playback_volume_range(elem, &min, &max)) < 0) {
-			LOG_ERROR("unable to get volume raw range");
-		} else {
-			long lraw, rraw;
-			if (setmax) {
-				lraw = rraw = max;
-			} else {
-				lraw = ((ldB > -MINVOL_DB ? MINVOL_DB + floor(ldB) : 0) / MINVOL_DB * (max-min)) + min;
-				rraw = ((rdB > -MINVOL_DB ? MINVOL_DB + floor(rdB) : 0) / MINVOL_DB * (max-min)) + min;
-			}
-			LOG_DEBUG("setting vol raw [%ld..%ld]", min, max);
-			if ((err = snd_mixer_selem_set_playback_volume(elem, SND_MIXER_SCHN_FRONT_LEFT, lraw)) < 0) {
-				LOG_ERROR("error setting left volume: %s", snd_strerror(err));
-			}
-			if ((err = snd_mixer_selem_set_playback_volume(elem, SND_MIXER_SCHN_FRONT_RIGHT, rraw)) < 0) {
-				LOG_ERROR("error setting right volume: %s", snd_strerror(err));
-			}
-		}
+	
+	if (alsa.mixer_linear) {
+        long lraw, rraw;
+        if (setmax) {
+            lraw = rraw = alsa.mixer_max;
+        } else {
+            lraw = ((ldB > -MINVOL_DB ? MINVOL_DB + floor(ldB) : 0) / MINVOL_DB * (alsa.mixer_max-alsa.mixer_min)) + alsa.mixer_min;
+            rraw = ((rdB > -MINVOL_DB ? MINVOL_DB + floor(rdB) : 0) / MINVOL_DB * (alsa.mixer_max-alsa.mixer_min)) + alsa.mixer_min;
+        }
+        LOG_DEBUG("setting vol raw [%ld..%ld]", alsa.mixer_min, alsa.mixer_max);
+        if ((err = snd_mixer_selem_set_playback_volume(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_LEFT, lraw)) < 0) {
+            LOG_ERROR("error setting left volume: %s", snd_strerror(err));
+        }
+        if ((err = snd_mixer_selem_set_playback_volume(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_RIGHT, rraw)) < 0) {
+            LOG_ERROR("error setting right volume: %s", snd_strerror(err));
+        }
 	} else {
 		// set db directly
-		LOG_DEBUG("setting vol dB [%ld..%ld]", min, max);
+		LOG_DEBUG("setting vol dB [%ld..%ld]", alsa.mixer_min, alsa.mixer_max);
 		if (setmax) {
 			// set to 0dB if available as this should be max volume for music recored at max pcm values
-			if (max >= 0 && min <= 0) {
+			if (alsa.mixer_max >= 0 && alsa.mixer_min <= 0) {
 				ldB = rdB = 0;
 			} else {
-				ldB = rdB = max;
+				ldB = rdB = alsa.mixer_max;
 			}
 		}
-		if ((err = snd_mixer_selem_set_playback_dB(elem, SND_MIXER_SCHN_FRONT_LEFT, 100 * ldB, 1)) < 0) {
+		if ((err = snd_mixer_selem_set_playback_dB(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_LEFT, 100 * ldB, 1)) < 0) {
 			LOG_ERROR("error setting left volume: %s", snd_strerror(err));
 		}
-		if ((err = snd_mixer_selem_set_playback_dB(elem, SND_MIXER_SCHN_FRONT_RIGHT, 100 * rdB, 1)) < 0) {
+		if ((err = snd_mixer_selem_set_playback_dB(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_RIGHT, 100 * rdB, 1)) < 0) {
 			LOG_ERROR("error setting right volume: %s", snd_strerror(err));
 		}
 	}
 
-	if ((err = snd_mixer_selem_get_playback_volume(elem, SND_MIXER_SCHN_FRONT_LEFT, &nleft)) < 0) {
+	if ((err = snd_mixer_selem_get_playback_volume(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_LEFT, &nleft)) < 0) {
 		LOG_ERROR("error getting left vol: %s", snd_strerror(err));
 	}
-	if ((err = snd_mixer_selem_get_playback_volume(elem, SND_MIXER_SCHN_FRONT_RIGHT, &nright)) < 0) {
+	if ((err = snd_mixer_selem_get_playback_volume(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_RIGHT, &nright)) < 0) {
 		LOG_ERROR("error getting right vol: %s", snd_strerror(err));
 	}
 
-	LOG_DEBUG("%s left: %3.1fdB -> %ld right: %3.1fdB -> %ld", mixer, ldB, nleft, rdB, nright);
-
-	snd_mixer_close(handle);
+	LOG_DEBUG("%s left: %3.1fdB -> %ld right: %3.1fdB -> %ld", alsa.volume_mixer_name, ldB, nleft, rdB, nright);
 }
 
 void set_volume(unsigned left, unsigned right) {
@@ -287,7 +244,7 @@
 	ldB = 20 * log10( left  / 65536.0F );
 	rdB = 20 * log10( right / 65536.0F );
 
-	set_mixer(alsa.ctl, alsa.volume_mixer_name, alsa.volume_mixer_index, false, ldB, rdB);
+	set_mixer(false, ldB, rdB);
 }
 
 static void *alsa_error_handler(const char *file, int line, const char *function, int err, const char *fmt, ...) {
@@ -878,10 +835,61 @@
 	return 0;
 }
 
+int mixer_init_alsa(const char *device, const char *mixer, int mixer_index) {
+	int err;
+	snd_mixer_selem_id_t *sid;
+
+	if ((err = snd_mixer_open(&alsa.mixer_handle, 0)) < 0) {
+		LOG_ERROR("open error: %s", snd_strerror(err));
+		return -1;
+	}
+	if ((err = snd_mixer_attach(alsa.mixer_handle, device)) < 0) {
+		LOG_ERROR("attach error: %s", snd_strerror(err));
+		snd_mixer_close(alsa.mixer_handle);
+		return -1;
+	}
+	if ((err = snd_mixer_selem_register(alsa.mixer_handle, NULL, NULL)) < 0) {
+		LOG_ERROR("register error: %s", snd_strerror(err));
+		snd_mixer_close(alsa.mixer_handle);
+		return -1;
+	}
+	if ((err = snd_mixer_load(alsa.mixer_handle)) < 0) {
+		LOG_ERROR("load error: %s", snd_strerror(err));
+		snd_mixer_close(alsa.mixer_handle);
+		return -1;
+	}
+
+	snd_mixer_selem_id_alloca(&sid);
+	snd_mixer_selem_id_set_index(sid, mixer_index);
+	snd_mixer_selem_id_set_name(sid, mixer);
+
+	if ((alsa.mixer_elem = snd_mixer_find_selem(alsa.mixer_handle, sid)) == NULL) {
+		LOG_ERROR("error find selem %s", alsa.mixer_handle);
+		snd_mixer_close(alsa.mixer_handle);
+		return -1;
+	}
+
+	if (snd_mixer_selem_has_playback_switch(alsa.mixer_elem)) {
+		snd_mixer_selem_set_playback_switch_all(alsa.mixer_elem, 1); // unmute
+	}
+
+	err = snd_mixer_selem_get_playback_dB_range(alsa.mixer_elem, &alsa.mixer_min, &alsa.mixer_max);
+
+	if (err < 0 || alsa.mixer_max - alsa.mixer_min < 1000 || alsa.mixer_linear) {
+	    alsa.mixer_linear = 1;
+		// unable to get db range or range is less than 10dB - ignore and set using raw values
+		if ((err = snd_mixer_selem_get_playback_volume_range(alsa.mixer_elem, &alsa.mixer_min, &alsa.mixer_max)) < 0)
+		{
+			LOG_ERROR("Unable to get volume raw range");
+			return -1;
+		}
+	}
+    return 0;
+}
+
 static pthread_t thread;
 
-void output_init_alsa(log_level level, const char *device, unsigned output_buf_size, char *params, unsigned rates[], 
-					  unsigned rate_delay, unsigned rt_priority, unsigned idle, char *volume_mixer, bool mixer_unmute) {
+void output_init_alsa(log_level level, const char *device, unsigned output_buf_size, char *params, unsigned rates[], unsigned rate_delay, unsigned rt_priority, unsigned idle, char *mixer_device, char *volume_mixer, bool mixer_unmute, bool mixer_linear) {
 
 	unsigned alsa_buffer = ALSA_BUFFER_TIME;
 	unsigned alsa_period = ALSA_PERIOD_COUNT;
@@ -919,12 +927,11 @@
 	alsa.format = 0;
 #endif
 	alsa.reopen = ((alsa_flags & 1) != 0);
+	alsa.mixer_handle = NULL;
 	alsa.ctl = ctl4device(device);
-
-	if (!mixer_unmute) {
-		alsa.volume_mixer_name = volume_mixer_name;
-		alsa.volume_mixer_index = volume_mixer_index ? atoi(volume_mixer_index) : 0;
-	}
+	alsa.mixer_ctl = mixer_device ? ctl4device(mixer_device) : alsa.ctl;
+	alsa.volume_mixer_name = volume_mixer_name;
+	alsa.mixer_linear = mixer_linear;
 
 	output.format = 0;
 	output.buffer = alsa_buffer;
@@ -953,9 +960,19 @@
 	snd_lib_error_set_handler((snd_lib_error_handler_t)alsa_error_handler);
 
 	output_init_common(level, device, output_buf_size, rates, idle);
-
-	if (mixer_unmute && volume_mixer_name) {
-		set_mixer(alsa.ctl, volume_mixer_name, volume_mixer_index ? atoi(volume_mixer_index) : 0, true, 0, 0);
+	
+	if (volume_mixer_name) {
+	        if (mixer_init_alsa(alsa.mixer_ctl, alsa.volume_mixer_name, volume_mixer_index ?
+			atoi(volume_mixer_index) : 0) < 0)
+		{
+			LOG_ERROR("Initialization of mixer failed, reverting to software volume");
+			alsa.mixer_handle = NULL;
+			alsa.volume_mixer_name = NULL;
+		}
+	}
+	if (mixer_unmute && alsa.volume_mixer_name) {
+		set_mixer(true, 0, 0);
+		alsa.volume_mixer_name = NULL;
 	}
 
 #if LINUX
@@ -1002,6 +1019,8 @@
 
 	if (alsa.write_buf) free(alsa.write_buf);
 	if (alsa.ctl) free(alsa.ctl);
+	if (alsa.mixer_ctl) free(alsa.mixer_ctl);
+	if (alsa.mixer_handle != NULL) snd_mixer_close(alsa.mixer_handle);
 
 	output_close_common();
 }
diff -ruN squeezelite-1.8.orig/squeezelite.h squeezelite-1.8/squeezelite.h
--- squeezelite-1.8.orig/squeezelite.h	2016-10-07 07:35:41.185089690 +0000
+++ squeezelite-1.8/squeezelite.h	2016-10-07 07:36:44.636205842 +0000
@@ -600,8 +600,7 @@
 void list_mixers(const char *output_device);
 void set_volume(unsigned left, unsigned right);
 bool test_open(const char *device, unsigned rates[]);
-void output_init_alsa(log_level level, const char *device, unsigned output_buf_size, char *params, unsigned rates[], 
-					  unsigned rate_delay, unsigned rt_priority, unsigned idle, char *volume_mixer, bool mixer_unmute);
+void output_init_alsa(log_level level, const char *device, unsigned output_buf_size, char *params, unsigned rates[], unsigned rate_delay, unsigned rt_priority, unsigned idle, char *mixer_device, char *volume_mixer, bool mixer_unmute, bool mixer_linear);
 void output_close_alsa(void);
 #endif
 
