diff -ruN squeezelite-1.8.orig/output_alsa.c squeezelite-1.8/output_alsa.c
--- squeezelite-1.8.orig/output_alsa.c	2016-10-30 22:48:20.059041718 +0000
+++ squeezelite-1.8/output_alsa.c	2016-10-30 22:57:46.923145411 +0000
@@ -63,6 +63,9 @@
 	snd_mixer_t *mixer_handle;
 	long mixer_min;
 	long mixer_max;
+	long mixer_set_raw;
+	long mixer_set_ldB;
+	long mixer_set_rdB;
 } alsa;
 
 static snd_pcm_t *pcmp = NULL;
@@ -82,6 +85,136 @@
 #define LOCK   mutex_lock(outputbuf->mutex)
 #define UNLOCK mutex_unlock(outputbuf->mutex)
 
+/*
+ * Revert SqueezePlay volume mapping from -74.0dB..0dB to 0..100
+ * See: Slim::Player::Squeezebox2 and Slim::Player::SqueezePlay
+ */
+static float inv_lms_vol_curve(unsigned g) {
+	int i;
+	float vol, db, db_l, db_h;
+	/*
+	 * Table contains SlimProto augc-message gain values for each 
+	 * LMS integer volume level from 1 to 100.
+	 */
+	int gain[] = {
+		16, 18, 22, 26, 31, 36, 43, 51, 61, 72, 85, 101, 120, 142, 168, 200, 237,
+		281, 333, 395, 468, 555, 658, 781, 926, 980, 1037, 1098, 1162, 1230, 1302,
+		1378, 1458, 1543, 1634, 1729, 1830, 1937, 2050, 2170, 2297, 2431, 2573,
+		2724, 2883, 3051, 3230, 3418, 3618, 3830, 4053, 4290, 4541, 4806, 5087,
+		5385, 5699, 6032, 6385, 6758, 7153, 7571, 8013, 8482, 8977, 9502, 10057,
+		10645, 11267, 11926, 12623, 13360, 14141, 14967, 15842, 16768, 17748, 18785,
+		19883, 21045, 22275, 23577, 24954, 26413, 27956, 29590, 31319, 33150, 35087,
+		37138, 39308, 41605, 44037, 46610, 49334, 52217, 55269, 58499, 61917, 65536
+	};
+	int size = sizeof(gain) / sizeof(gain[0]);
+
+	if (g == 0) return 0.0;
+	
+	for (i = 0; i < size; i++)
+		if (g <= gain[i]) break;
+	
+	if (i == size) return 100.0;
+
+	db = 20 * log10(g / 65536.0);
+	db_l = (i == 0 ? -74.0 : 20 * log10(gain[i - 1] / 65536.0));
+	db_h = 20 * log10(gain[i] / 65536.0);
+	vol = i + (db_l - db) / (db_l - db_h);
+
+	return vol;
+}
+
+static float inv_daphile_vol_curve(float y2) {
+	float totalVolumeRange = -74.0;
+	float stepPoint = 24;
+	float stepdB = -38;
+	float maxVolumedB = 0.0;
+	float slope_high = (maxVolumedB - stepdB) / (100 - stepPoint); // 0.5
+	float slope_low = (stepdB - totalVolumeRange) / stepPoint;     // 1.5
+	float m, x1, y1, x2;
+
+	if (y2 > stepdB) {
+		m = slope_high;
+		x1 = 100.0;
+		y1 = maxVolumedB;
+	} else {
+		m = slope_low;
+		x1 = 0.0;
+		y1 = totalVolumeRange;
+	}
+	
+	x2 = x1 + (y2 - y1) / m;
+
+	if (x2 > 100.0) x2 = 100.0;
+	if (x2 < 0.0) x2 = 0.0;
+
+	return x2;
+}
+
+static float daphile_vol_curve(float x2) {
+	float totalVolumeRange = -74.0;
+	float stepPoint = 24;
+	float stepdB = -38;
+	float maxVolumedB = 0.0;
+	float slope_high = (maxVolumedB - stepdB) / (100 - stepPoint); // 0.5
+	float slope_low = (stepdB - totalVolumeRange) / stepPoint;     // 1.5
+	float m, x1, y1, y2;
+
+	if (x2 > 100.0) x2 = 100.0;
+	if (x2 < 0.0) x2 = 0.0;
+
+	if (x2 > stepPoint) {
+		m = slope_high;
+		x1 = 100.0;
+		y1 = maxVolumedB;
+	} else {
+		m = slope_low;
+		x1 = 0.0;
+		y1 = totalVolumeRange;
+	}
+	
+	y2 = y1 + m * (x2 - x1);
+
+	return y2;
+}
+
+void send_volume(void) {
+	int err;
+	long left, right, level, dB;
+	float lms_volume;
+	
+	if (!alsa.volume_mixer_name) return;
+	if (snd_mixer_handle_events(alsa.mixer_handle) < 1) return;
+
+	if ((err = snd_mixer_selem_get_playback_volume(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_LEFT, &left)) < 0) {
+		LOG_ERROR("error getting left vol (raw): %s", snd_strerror(err));
+		return;
+	}
+	if ((err = snd_mixer_selem_get_playback_volume(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_RIGHT, &right)) < 0) {
+		LOG_ERROR("error getting right vol (raw): %s", snd_strerror(err));
+		return;
+	}
+
+	level = (left > right ? left : right);
+	if (level == alsa.mixer_set_raw) return;
+
+	if (alsa.mixer_linear) {
+		lms_volume = 100.0 * ( level - alsa.mixer_min ) / ( alsa.mixer_max - alsa.mixer_min );
+	} else {
+		if ((err = snd_mixer_selem_get_playback_dB(alsa.mixer_elem, (left > right ? SND_MIXER_SCHN_FRONT_LEFT : SND_MIXER_SCHN_FRONT_RIGHT), &dB)) < 0) {
+			LOG_ERROR("error getting vol in dB: %s", snd_strerror(err));
+			return;
+		}
+		lms_volume = inv_daphile_vol_curve(0.01 * ( dB - alsa.mixer_max ));
+	}
+
+	char volcmd[32];
+	lms_volume = floor(lms_volume * 100 + 0.5) / 100;
+	sprintf(volcmd, "\"mixer\",\"volume\",\"%.1f\"", lms_volume);
+	send_jsonrpc(volcmd);
+	LOG_INFO("sync changed volume from mixer to LMS: %.1f", lms_volume);
+	alsa.mixer_set_raw = level;
+}
+
 static char *ctl4device(const char *device) {
 	char *ctl = NULL;
 	
@@ -173,58 +306,68 @@
 	snd_mixer_close(handle);
 }
 
-#define MINVOL_DB 72 // LMS volume map for SqueezePlay sends values in range ~ -72..0 dB
-
-static void set_mixer(bool setmax, float ldB, float rdB) {
-	int err;
+static void set_mixer(bool setmax, unsigned left, unsigned right) {
+	int err, dir;
 	long nleft, nright;
+
+	float lvol = inv_lms_vol_curve(left);
+	float rvol = inv_lms_vol_curve(right);
 	
 	if (alsa.mixer_linear) {
-        long lraw, rraw;
         if (setmax) {
-            lraw = rraw = alsa.mixer_max;
+            nleft = nright = alsa.mixer_max;
         } else {
-            lraw = ((ldB > -MINVOL_DB ? MINVOL_DB + floor(ldB) : 0) / MINVOL_DB * (alsa.mixer_max-alsa.mixer_min)) + alsa.mixer_min;
-            rraw = ((rdB > -MINVOL_DB ? MINVOL_DB + floor(rdB) : 0) / MINVOL_DB * (alsa.mixer_max-alsa.mixer_min)) + alsa.mixer_min;
+            nleft = floor(lvol * (alsa.mixer_max - alsa.mixer_min) / 100.0 + 0.5) + alsa.mixer_min;
+            nright = floor(rvol * (alsa.mixer_max - alsa.mixer_min) / 100.0 + 0.5) + alsa.mixer_min;
         }
         LOG_DEBUG("setting vol raw [%ld..%ld]", alsa.mixer_min, alsa.mixer_max);
-        if ((err = snd_mixer_selem_set_playback_volume(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_LEFT, lraw)) < 0) {
+        if ((err = snd_mixer_selem_set_playback_volume(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_LEFT, nleft)) < 0) {
             LOG_ERROR("error setting left volume: %s", snd_strerror(err));
         }
-        if ((err = snd_mixer_selem_set_playback_volume(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_RIGHT, rraw)) < 0) {
+        if ((err = snd_mixer_selem_set_playback_volume(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_RIGHT, nright)) < 0) {
             LOG_ERROR("error setting right volume: %s", snd_strerror(err));
         }
 	} else {
 		// set db directly
 		LOG_DEBUG("setting vol dB [%ld..%ld]", alsa.mixer_min, alsa.mixer_max);
 		if (setmax) {
-			// set to 0dB if available as this should be max volume for music recored at max pcm values
-			if (alsa.mixer_max >= 0 && alsa.mixer_min <= 0) {
-				ldB = rdB = 0;
-			} else {
-				ldB = rdB = alsa.mixer_max;
-			}
+			nleft = nright = alsa.mixer_max;
+		} else {
+			nleft = 50 * floor(2 * daphile_vol_curve(lvol) + 0.5) + alsa.mixer_max;
+			nright = 50 * floor(2 * daphile_vol_curve(rvol) + 0.5) + alsa.mixer_max;
 		}
-		if ((err = snd_mixer_selem_set_playback_dB(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_LEFT, 100 * ldB, 1)) < 0) {
+		
+		dir = (nleft > alsa.mixer_set_ldB ? 1 : -1);
+		if ((err = snd_mixer_selem_set_playback_dB(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_LEFT, nleft, dir)) < 0) {
 			LOG_ERROR("error setting left volume: %s", snd_strerror(err));
+		} else {
+			alsa.mixer_set_ldB = nleft;
 		}
-		if ((err = snd_mixer_selem_set_playback_dB(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_RIGHT, 100 * rdB, 1)) < 0) {
+		
+		dir = (nright > alsa.mixer_set_rdB ? 1 : -1);
+		if ((err = snd_mixer_selem_set_playback_dB(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_RIGHT, nright, dir)) < 0) {
 			LOG_ERROR("error setting right volume: %s", snd_strerror(err));
+		} else {
+			alsa.mixer_set_rdB = nright;
 		}
 	}
 
 	if ((err = snd_mixer_selem_get_playback_volume(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_LEFT, &nleft)) < 0) {
 		LOG_ERROR("error getting left vol: %s", snd_strerror(err));
+	} else {
+		alsa.mixer_set_raw = nleft;
 	}
 	if ((err = snd_mixer_selem_get_playback_volume(alsa.mixer_elem, SND_MIXER_SCHN_FRONT_RIGHT, &nright)) < 0) {
 		LOG_ERROR("error getting right vol: %s", snd_strerror(err));
+	} else if (nright > nleft) {
+		alsa.mixer_set_raw = nright;
 	}
 
-	LOG_DEBUG("%s left: %3.1fdB -> %ld right: %3.1fdB -> %ld", alsa.volume_mixer_name, ldB, nleft, rdB, nright);
+	LOG_DEBUG("%s left: %3.1fdB -> %ld right: %3.1fdB -> %ld", alsa.volume_mixer_name,
+			  alsa.mixer_set_ldB / 100.0, nleft, alsa.mixer_set_rdB / 100.0, nright);
 }
 
 void set_volume(unsigned left, unsigned right) {
-	float ldB, rdB;
 
 	if (!alsa.volume_mixer_name) {
 		LOG_DEBUG("setting internal gain left: %u right: %u", left, right);
@@ -232,19 +375,13 @@
 		output.gainL = left;
 		output.gainR = right;
 		UNLOCK;
-		return;
 	} else {
 		LOCK;
 		output.gainL = FIXED_ONE;
 		output.gainR = FIXED_ONE;
 		UNLOCK;
+		set_mixer(false, left, right);
 	}
-
-	// convert 16.16 fixed point to dB
-	ldB = 20 * log10( left  / 65536.0F );
-	rdB = 20 * log10( right / 65536.0F );
-
-	set_mixer(false, ldB, rdB);
 }
 
 static void *alsa_error_handler(const char *file, int line, const char *function, int err, const char *fmt, ...) {
diff -ruN squeezelite-1.8.orig/slimproto.c squeezelite-1.8/slimproto.c
--- squeezelite-1.8.orig/slimproto.c	2016-10-30 22:48:20.059041718 +0000
+++ squeezelite-1.8/slimproto.c	2016-10-30 22:47:58.753097975 +0000
@@ -38,6 +38,9 @@
 static sockfd sock = -1;
 static in_addr_t slimproto_ip = 0;
 
+static unsigned jsonrpc_port = 0;
+static char playerid[18];
+
 extern struct buffer *streambuf;
 extern struct buffer *outputbuf;
 
@@ -721,6 +724,7 @@
 #if IR
 			if (_sendIR)   sendIR(ir_code, ir_ts);
 #endif
+			send_volume();
 		}
 	}
 }
@@ -774,6 +778,83 @@
 	return s.sin_addr.s_addr;
 }
 
+unsigned query_jsonrpc_port(unsigned slimproto_port) {
+	
+	struct sockaddr_in serv_addr;
+	socklen_t addr_len = sizeof(serv_addr);
+	int sock;
+	unsigned port = 0;
+	char *query = "eJSON";
+	char resp[16];
+
+	if ((sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1) return 0;
+
+	memset((char *) &serv_addr, 0, sizeof(serv_addr));
+	serv_addr.sin_family = AF_INET;
+	serv_addr.sin_addr.s_addr = slimproto_ip;
+	serv_addr.sin_port = htons(slimproto_port);
+
+	if (sendto(sock, query, sizeof(query), 0, (struct sockaddr *) &serv_addr, addr_len) == -1) return 0;
+	if (recvfrom(sock, resp, sizeof(resp), 0, (struct sockaddr *) &serv_addr, &addr_len) == -1) return 0;
+
+	close(sock);
+
+	if (strncmp(resp, "EJSON", 5) == 0)
+		port = atoi(resp + 6);
+	
+	return port;
+}
+
+#define JSONRPC_FMT "POST /jsonrpc.js HTTP/1.0\r\nContent-Length: %zu\r\n\r\n%s"
+#define CONTENT_FMT "{\"method\":\"slim.request\",\"params\":[\"%s\",[%s]]}"
+
+void send_jsonrpc(char *cmd) {
+	int len, sock, sent, bytes;
+	char *query;
+	char *content;
+	struct sockaddr_in serv_addr;
+
+	if (!jsonrpc_port) return;
+
+	len = strlen(CONTENT_FMT) + strlen(cmd) + 16;
+	content = (char *) malloc(len);
+	sprintf(content, CONTENT_FMT, playerid, cmd);
+	len = strlen(JSONRPC_FMT) + strlen(content) + 16;
+	query = (char *) malloc(len);
+	sprintf(query, JSONRPC_FMT, strlen(content), content);
+	LOG_DEBUG("message: %s", content);
+	free(content);
+
+	if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
+		free(query);
+		return;
+	}
+
+	memset((char *) &serv_addr, 0, sizeof(serv_addr));
+	serv_addr.sin_family = AF_INET;
+	serv_addr.sin_addr.s_addr = slimproto_ip;
+	serv_addr.sin_port = htons(jsonrpc_port);
+	
+	if (connect(sock,(struct sockaddr *)&serv_addr,sizeof(serv_addr)) < 0) {
+		free(query);
+		close(sock);
+		return;
+	}
+
+	len = strlen(query);
+	sent = 0;
+	do {
+		bytes = write(sock, query + sent, len - sent);
+		if (bytes < 1) break;
+		sent += bytes;
+	} while (sent < len);
+
+	free(query);
+	close(sock);
+
+	return;
+}
+
 #define FIXED_CAP_LEN 256
 #define VAR_CAP_LEN   128
 
@@ -856,6 +937,7 @@
 			slimproto_ip = serv_addr.sin_addr.s_addr = new_server;
 			LOG_INFO("switching server to %s:%d", inet_ntoa(serv_addr.sin_addr), ntohs(serv_addr.sin_port));
 			new_server = 0;
+			jsonrpc_port = 0;
 			reconnect = false;
 		}
 
@@ -883,6 +965,10 @@
 
 			var_cap[0] = '\0';
 			failed_connect = 0;
+			
+			jsonrpc_port = query_jsonrpc_port(slimproto_port);
+			LOG_INFO("JSON/RPC port: %d", jsonrpc_port);
+			sprintf(playerid, "%02x:%02x:%02x:%02x:%02x:%02x", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 
 			// check if this is a local player now we are connected & signal to server via 'loc' format
 			// this requires LocalPlayer server plugin to enable direct file access
diff -ruN squeezelite-1.8.orig/squeezelite.h squeezelite-1.8/squeezelite.h
--- squeezelite-1.8.orig/squeezelite.h	2016-10-30 22:48:20.059041718 +0000
+++ squeezelite-1.8/squeezelite.h	2016-10-30 22:47:58.753097975 +0000
@@ -429,6 +429,7 @@
 void slimproto(log_level level, char *server, u8_t mac[6], const char *name, const char *namefile, const char *modelname, bool lms_downsample);
 void slimproto_stop(void);
 void wake_controller(void);
+void send_jsonrpc(char *);
 
 // stream.c
 typedef enum { STOPPED = 0, DISCONNECT, STREAMING_WAIT,
@@ -599,6 +600,7 @@
 void list_devices(void);
 void list_mixers(const char *output_device);
 void set_volume(unsigned left, unsigned right);
+void send_volume(void);
 bool test_open(const char *device, unsigned rates[]);
 void output_init_alsa(log_level level, const char *device, unsigned output_buf_size, char *params, unsigned rates[], unsigned rate_delay, unsigned rt_priority, unsigned idle, char *mixer_device, char *volume_mixer, bool mixer_unmute, bool mixer_linear);
 void output_close_alsa(void);
